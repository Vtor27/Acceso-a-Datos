package es.florida.AE02_ADD_XML_MySQL;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.File;
import java.io.IOException;

import java.sql.SQLException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.util.Arrays;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 * Clase controlador que gestiona la interacción entre el modelo, las vistas y la lógica de la aplicación.
 */
public class Controlador {

	private Modelo modelo;
	private Vista vista;
	private VistaLogin vistaLogin;
	private String[] cabeceraActual;
	private List<String[]> datosActuales;
	
	/**
	 * Constructor de la clase Controlador.
	 * Inicializa los componentes principales del controlador.
	 * También desactiva los botones al inicio y define los controladores para las acciones de los botones.
	 *
	 * @param modelo Instancia del modelo que gestiona la lógica de negocio y la interacción con la base de datos.
	 * @param vista Instancia de la vista principal de la aplicación.
	 * @param vistaLogin Instancia de la vista para iniciar de sesión.
	 */
	public Controlador(Modelo modelo, Vista vista, VistaLogin vistaLogin) {
		this.modelo = modelo;
		this.vista = vista;
		this.vistaLogin = vistaLogin;
		
		controlActEstadoConexion(false);
		vista.getBtn_NuevoUser().setEnabled(false);
		vista.getBtnImportarCSV().setEnabled(false);
		vista.getBtnCargarXML().setEnabled(false);
		vista.getBtnInsertar_ArchivosXML().setEnabled(false);
		vista.getBtnEjecutarConsulta().setEnabled(false);
		
		controlPressBtnLogin();
		controlPressBtnNuevoUser();
		controlPressBtnLogin_Login();
		controlBtnRegistrarUser();
		controlBtnImportarCSV();
		controlBtnCargarXML();
		controlInsertarArchivosXML();
		controlBtnEjecutarConsulta();
		controlBtnExportarResultado();
	}
	
	 /**
     * Controlador del botón "Login".
     * Muestra la ventana de inicio de sesión.
     */
	public void controlPressBtnLogin() {	
		vista.getBtnLogin().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				vistaLogin.mostrarVistaLogin();
			}
		});
	}
	
	/**
     * Controlador del botón "Insertar desde Archivos XML".
     * Inserta los datos desde los archivos XML en la base de datos.
     */
	public void controlInsertarArchivosXML() {
		vista.getBtnInsertar_ArchivosXML().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
			modelo.insertarDesdeArchivosXML();
				
			}
		});
	}
	
	/**
     * Controlador del botón "Nuevo Usuario".
     * Configura la vista para registrar un nuevo usuario.
     */
	public void controlPressBtnNuevoUser() {
		vista.getBtn_NuevoUser().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				vistaLogin.resetearVistaLogin();
				vistaLogin.mostrarVistaLogin();
				vistaLogin.getBtnRegistrar_Login().setVisible(true);
				vistaLogin.getPasswordField_RepitePasword().setVisible(true);
				vistaLogin.getLblRepiteContraseña().setVisible(true);
				
				vistaLogin.getBtnLogin_Login().setVisible(false);
				vistaLogin.getLblTitulo().setText("Registrar User");
			}
		});
	}
	
	/**
	 * Controlador del botón de inicio de sesión en la ventana de login.
	 * Valida las credenciales introducidas por el usuario y configura la interfaz según el tipo de usuario.
	 */
	public void controlPressBtnLogin_Login() {
		vistaLogin.getBtnLogin_Login().addActionListener(new ActionListener() {		
			@Override
			public void actionPerformed(ActionEvent e) {
				String user = vistaLogin.getTextField_User().getText();
				String password = new String(vistaLogin.getPasswordField_Password().getPassword());	//.getPass() DEVUELVE UNA CADENA DE CARACTERES. POR SEGURIDAD ES ASI
				
				if(user.isEmpty() || password.isEmpty()) {
					JOptionPane.showMessageDialog(null, "Para poder loguearse el Usuario y la Contraseña no pueden estar vacios.");
					return;
				}
				
				if(modelo.validarUsuario(user, password)) {
					String tipoUser = modelo.obtenerTipoUsuario(user);
					
					vista.getLblUser_Actual().setText("Usuario: " + user);
					JOptionPane.showMessageDialog(null, "Bienvenido " + user);
					vista.getBtnEjecutarConsulta().setEnabled(true);
					
					if(tipoUser.equals("admin")) {
						vista.getBtn_NuevoUser().setEnabled(true);
						vista.getBtnImportarCSV().setEnabled(true);
						vista.getBtnCargarXML().setEnabled(true);
						vista.getBtnInsertar_ArchivosXML().setEnabled(true);
						vista.getBtnEjecutarConsulta().setEnabled(true);
					} else {
						vista.getBtn_NuevoUser().setEnabled(false);
						vista.getBtnImportarCSV().setEnabled(false);
						vista.getBtnCargarXML().setEnabled(false);
						vista.getBtnInsertar_ArchivosXML().setEnabled(false);

					}
					
					if(modelo.iniciarConexion() != null) {
						controlActEstadoConexion(true);
					}else{
						controlActEstadoConexion(false);
					}
						
					vistaLogin.getTextField_User().setText("");
					vistaLogin.getPasswordField_Password().setText("");
					
					vista.getLblTipo_User().setText("Tipo de Usuario: " + tipoUser);

					vistaLogin.cerrarVentanaLogin();
					
					vista.getBtnLogin().setText("LOGOUT");
	                for (ActionListener al : vista.getBtnLogin().getActionListeners()) {
	                    vista.getBtnLogin().removeActionListener(al);
	                }
	                vista.getBtnLogin().addActionListener(new ActionListener() {
	                    @Override
	                    public void actionPerformed(ActionEvent e) {
	                    	controlCerrarSesion();
	                    }
	                });		
				} else {
					JOptionPane.showMessageDialog(null, "Usuario o contraseña incorrectos", "ERROR", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
	}

	public void controlCerrarSesion() {
		JOptionPane.showMessageDialog(null, "Sesión cerrada.");
		
		vistaLogin.resetearVistaLogin();
		
		Modelo.cerrarConexionDB();
		controlActEstadoConexion(false);
		vista.getBtn_NuevoUser().setEnabled(false);
		vista.getBtnImportarCSV().setEnabled(false);
		vista.getBtnCargarXML().setEnabled(false);
		vista.getBtnInsertar_ArchivosXML().setEnabled(false);
		vista.getBtnEjecutarConsulta().setEnabled(false);
		
		vista.getLblTipo_User().setText("Tipo de Usuario: Sin usuario");
		vista.getLblUser_Actual().setText("Usuario: Ninguno");
		
		vista.getBtnLogin().setText("LOGIN");
		
		for (ActionListener al : vista.getBtnLogin().getActionListeners()) {
			vista.getBtnLogin().removeActionListener(al);
		}
		//Al crear un actionListener se crea un array donde se introducen(las acciones, la accion 0 es la funcion del primer click en login) por eso quiero eliminar esa y agregarle cerrar sesion.
		vista.getBtnLogin().addActionListener(new ActionListener() {
	        @Override
	        public void actionPerformed(ActionEvent e) {
	            vistaLogin.mostrarVistaLogin();
	        }
	    });
	}
	
	public void controlActEstadoConexion(boolean conectado) {
		if(conectado == true) {
			vista.getLblEstadoConexion().setText("Conectado");
			vista.getLblEstadoConexion().setForeground(Color.GREEN);
		}else {
			vista.getLblEstadoConexion().setText("Desconectado");
			vista.getLblEstadoConexion().setForeground(Color.RED);
		}
	}

	public void controlBtnRegistrarUser() {
		
		vistaLogin.getBtnRegistrar_Login().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				String user = vistaLogin.getTextField_User().getText();
				String password = new String(vistaLogin.getPasswordField_Password().getPassword());
				String confirmPassword = new String(vistaLogin.getPasswordField_RepitePasword().getPassword());
				
				if(user.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
				JOptionPane.showMessageDialog(null, "Todos los campos són obligatorios.", "ERROR", JOptionPane.ERROR_MESSAGE);
				return;
				}
				
				if(!password.equals(confirmPassword)) {
					JOptionPane.showMessageDialog(null, "Las contraseñas no coinciden.", "ERROR", JOptionPane.ERROR_MESSAGE);
					return;
				}
				
				if(modelo.comprobarUsuario(user)) {
					JOptionPane.showMessageDialog(null, "El usuario ya existe.", "ERROR", JOptionPane.ERROR_MESSAGE);
					return;
				}
				
				boolean userInsertado = modelo.registrarUser(user, password);
				if(userInsertado == true) {
					JOptionPane.showMessageDialog(null, "Usuario " + user + " registrado en la base de datos con exito.");
					vistaLogin.resetearVistaLogin();
				} else {
					JOptionPane.showMessageDialog(null, "ERROR al insertar el nuevo usuario.", "ERROR", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
	}

 	public void controlBtnImportarCSV() {
	    vista.getBtnImportarCSV().addActionListener(new ActionListener() {

	        @Override
	        public void actionPerformed(ActionEvent e) {
	        	
	            try {
	                File archivoCSV = new File("AE02_population.csv");
	                if (!archivoCSV.exists()) {
	                    JOptionPane.showMessageDialog(null, "El archivo CSV no existe.", "ERROR", JOptionPane.ERROR_MESSAGE);
	                    return;
	                }

	                List<String[]> populationCSV = modelo.leerCSV(archivoCSV.getAbsolutePath());
	                String[] cabecera = modelo.obtenereCabeceraCSV(archivoCSV);

	                
	                formatearResultado(cabecera, populationCSV, vista.getTextAreaArchivos());

	                modelo.crearTablaPopulation(cabecera);

	            } catch (IOException ex) {
	                JOptionPane.showMessageDialog(null, "Error al leer el archivo CSV.", "ERROR", JOptionPane.ERROR_MESSAGE);
	                ex.printStackTrace();
	            } catch (SQLException ex) {
	                JOptionPane.showMessageDialog(null, "Error al interactuar con la base de datos.", "ERROR", JOptionPane.ERROR_MESSAGE);
	                ex.printStackTrace();
	            }
	        }
	    }); 
	} 

	public void controlBtnCargarXML() {
		vista.getBtnCargarXML().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				 try {
					 List<String[]> populationCSV = modelo.leerCSV("AE02_population.csv");
					 String[] cabecera = modelo.obtenereCabeceraCSV(new File("AE02_population.csv"));
					 
					 modelo.generarArchivosXML(populationCSV, cabecera);
					 
					 JOptionPane.showMessageDialog(null, "Archivos XML creados con exito.");
					 
					 mostrarArchivosXML(populationCSV, cabecera);
					 
				 }catch(Exception ex) {
					 JOptionPane.showMessageDialog(null, "Error al generar los archivos XML: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
					 ex.printStackTrace();
				 }
				
			}
		});
	}
	
	public void controlBtnEjecutarConsulta() {
		vista.getBtnEjecutarConsulta().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				String consulta = vista.getTextField_ConsultaSQL().getText();
				
				String tipoUser = modelo.obtenerTipoUsuario(vista.getLblUser_Actual().getText().split(": ")[1]);	//AL UTILIZAR UN LABEL DONDE PONGO "TIPO DE USUARIO:" SEPATO LA STRING POR LOS DOS PUNTOS Y EL EPACIO PARA QUEDARME CON EL TIPO DE USUARIO Y SE LO PASO AL METODO. 
				
				try {
					List<String[]> query = modelo.ejecutaConsultaPersonalizada(consulta, tipoUser);
					
					if (query != null && !query.isEmpty()) {
		                cabeceraActual = query.get(0); //INTRODUZCO LOS VALORES DE LA PRIMERA FILA PARA QUE SEAN LOS VALORES DE LA CABECERA
		                datosActuales = query.subList(1, query.size()); // El resto son las filas
		                
		                formatearResultado(cabeceraActual, datosActuales, vista.getTextAreaConsultaSQL()); // Método para mostrar en la vista
		            } else {
		                JOptionPane.showMessageDialog(null, "La consulta no devolvió resultados.", "INFO", JOptionPane.INFORMATION_MESSAGE);
		            }
				
				} catch (SQLException ex) {
	                JOptionPane.showMessageDialog(null, "Error al ejecutar la consulta: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
	                ex.printStackTrace();
	            }
			}
		});
	}
	
	public void mostrarResultadosConsulta(List<String[]> resultados) {
		vista.getTextAreaConsultaSQL().setText("");
		
		String[] cabecera = resultados.get(0);
	    StringBuilder contenido = new StringBuilder();
	    contenido.append(String.join("\t", cabecera)).append("\n"); // Cabecera separada por tabuladores
	    contenido.append("-".repeat(50)).append("\n"); // Línea divisoria
	    
	    // Mostrar cada fila
	    for (int i = 1; i < resultados.size(); i++) {
	        String[] fila = resultados.get(i);
	        contenido.append(String.join("\t", fila)).append("\n");
	    }

	    // Mostrar en el JTextArea
	    vista.getTextAreaConsultaSQL().setText(contenido.toString());
	}
	
	public void mostrarArchivosXML(List<String[]> populationCSV, String[] cabecera) {
		vista.getTextAreaArchivos().setText("");
		
		String contenido = "";
		populationCSV.remove(0);
		
		for (String[] fila : populationCSV) {
			contenido += "<country>\n";
			for (int i = 1; i < cabecera.length; i++) {
				contenido +="     <" + cabecera[i] + ">" 
				+ fila[i] 
				+ "</" + cabecera[i] + ">\n";
			}
			contenido += "</country>\n\n";
		}
		vista.getTextAreaArchivos().setText(contenido);
	}
	
	public void formatearResultado(String[] cabecera, List<String[]> datos, JTextArea textArea) {
	    try {
	    	System.out.println("Cabecera recibida: " + Arrays.toString(cabecera));
	        System.out.println("Datos recibidos: " + datos.size());
	    	String resultado = "";
	        String separador = "|";

	        for (String columna : cabecera) {
	            resultado += String.format("%-25s" + separador, columna);
	        }
	        resultado += "\n";

	        for (int i = 0; i < cabecera.length; i++) {
	            resultado += "=========================" + separador;
	        }
	        resultado += "\n";

	        for (String[] fila : datos) {
	            for (String valor : fila) {
	                resultado += String.format("%-25s" + separador, valor != null ? valor : "NULL");
	            }
	            resultado += "\n";
	        }

	        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));	//FUENTE QUE TIENE UN ANCHO FIJO PARA ASEGURARME DE QUE LOS CARACTERES OCUPEN TODOS LO MISMO.
	        textArea.setText(resultado.toString());
	    	
	    } catch (Exception e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Error al mostrar los datos.", "ERROR", JOptionPane.ERROR_MESSAGE);
	    }
	}
	
	public void controlBtnExportarResultado() {
		vista.getBtnExportarResult().addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					if (cabeceraActual == null || cabeceraActual == null || cabeceraActual.length == 0) {
			                JOptionPane.showMessageDialog(null, "No hay datos para exportar.", "INFO", JOptionPane.INFORMATION_MESSAGE);
			                return;
			         }
					
					File carpetaExportacion = new File("CSV_Exportados");
		            if (!carpetaExportacion.exists()) {
		                carpetaExportacion.mkdirs();
		            }
		            DateTimeFormatter dateFormatterDate = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
		            String fechaHoraActual = LocalDateTime.now().format(dateFormatterDate);
		            
		            File archivoCSV = new File(carpetaExportacion, "consulta_" + fechaHoraActual + ".csv");
		            System.out.println("Datos actuales: " + datosActuales.size());
		            boolean exportacion = modelo.exportarArchivoCSV(cabeceraActual, datosActuales, archivoCSV);
		            
		            if(exportacion) {
		            	 JOptionPane.showMessageDialog(null, "Archivo exportado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
		            } else {
		                JOptionPane.showMessageDialog(null, "Error al exportar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
		            }
		            
				} catch (Exception ex) {
		            ex.printStackTrace();
		            JOptionPane.showMessageDialog(null, "Error al procesar la exportación.", "Error", JOptionPane.ERROR_MESSAGE);
		        }
				
			}
		});
		
	}

}
